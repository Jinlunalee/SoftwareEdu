<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mycompany.webapp.dao.IHomeRepository">

	<select id="selectSubjectList" parameterType="String" resultType="OpenVO">	
	/* selectSubjectList */
		select 
			open.subject_id, 
			subject_seq,
			subject_title,
			support_yn, 
			days, 
			hours, 
			level_cd, 
			level_etc, 
			subject.cost,
			open.course_id, 
			course.course_title, 
			start_time,
			end_time,
			start_day,
			end_day, 
			recruit_start_day, 
			recruit_end_day,
			recruit_people,
			state_cd as open_state_cd,
			comn_cd_title as open_state_cd_title,
			file_id,
            subject.cat_cd as cat_subject_cd
		from open 
				left join subject on open.subject_id = subject.subject_id
        		left join course on open.course_id = course.course_id
        		left join common_code on open.state_cd = common_code.comn_cd
        where del_yn = 'N' AND subject.cat_cd=#{catSubjectCd}
        order by start_day, end_day
	</select>
	
	
	
	
	<select id="selectCourseList" parameterType="String" resultType="OpenVO">
	/* selectCourseList */
		select DISTINCT
			open.course_id, 
			course_title,
			min(start_day) over (partition by open.course_id) as start_day,
    		max(end_day) over (partition by open.course_id) as end_day,
			sum(cost) over (partition by open.course_id) as cost,
			recruit_start_day,
			recruit_end_day,
			state_cd as open_state_cd,
			comn_cd_title as open_state_cd_title
		from open 
				left join subject on open.subject_id = subject.subject_id
        		left join course on open.course_id = course.course_id
        		left join common_code on open.state_cd = common_code.comn_cd
        where open.course_id IS NOT NULL and del_yn = 'N' AND course.cat_cd = #{catCourseCd}
	</select>
	
	<select id="getComnCdTitle" parameterType="String" resultType="String">
	/* getComnCdTitle */
		SELECT comn_cd_title
		FROM common_code
		WHERE comn_cd=#{comnCd}
	</select>

	<select id="getComnCdList" parameterType="String" resultType="CommonCodeVO">
	/*getComnCdList*/
		SELECT * 
		FROM common_code
		WHERE comn_cd_type = #{comnCdType} AND use_yn='Y'
	</select>

	<select id="searchSubject" parameterType="SubjectVO" resultType="SubjectVO">
	/*searchSubject*/
		SELECT
		    subject_id,
		    subject_title,
		    support_yn,
		    cat_cd as cat_subject_cd,
		    days,
		    hours,
		    level_cd,
		    level_etc,
		    cost,
		    reg_year
		FROM subject
		<where>
			<if test="subjectId != null and !subjectId.equals('') ">
				AND subject_id = #{subjectId}
			</if>
			<if test="subjectTitle != null and !subjectTitle.equals('')">
				AND (subject_title = #{subjectTitle} OR REPLACE (subject_title, ' ', '') LIKE '%'||#{subjectTitle}||'%')
			</if>
			<if test="catSubjectCd != null and !catSubjectCd.equals('')">
				AND cat_cd = #{catSubjectCd} 
			</if>
			<if test="levelCd != null and !levelCd.equals('') ">
				AND level_cd = #{levelCd} 
			</if>
			<if test="regYear != 0">
				AND reg_year = #{regYear} 
			</if>
		</where>
	</select>
	
	<select id="searchCourse" parameterType="CourseVO" resultType="CourseVO">
	/*searchCourse*/
		(SELECT
		    course_id,
		    course_title,
		    cat_cd as cat_course_cd
		FROM course
		<where>
			<if test="courseId != null and !courseId.equals('') ">
				AND course_id = #{courseId}
			</if>
			<if test="courseTitle != null and !courseTitle.equals('')">
				AND (course_title = #{courseTitle} OR REPLACE (course_title, ' ', '') LIKE '%'||#{courseTitle}||'%')
			</if>
			<if test="catCourseCd != null and !catCourseCd.equals('')">
				AND cat_cd = #{catCourseCd} 
			</if>
		</where>)
		MINUS
		(SELECT
		    distinct open.course_id,
		    course_title,
		    cat_cd as cat_course_cd
		FROM open
		LEFT JOIN course on open.course_id=course.course_id
		WHERE course_open_year = 2023 and state_cd != 'OPN01' and open.course_id IS NOT NULL)
	</select>
	
	<select id="searchOpenSubject" parameterType="OpenVO" resultType="OpenVO">
	/*searchOpenSubject*/
		SELECT
		    open.subject_id, /* 강좌아이디 */
		    subject_seq, /* 차수 */
		    subject_title,
		    support_yn, 
		    days, 
		    hours, 
		    level_cd, 
		    level_etc, 
		    subject.cost,
		    open.course_id, 
		    course.course_title, 
		    start_time,
		    end_time,
		    TO_CHAR(TO_DATE(start_day, 'YYYYMMDD'), 'YYYY-MM-DD') AS start_day, /**/
		    TO_CHAR(TO_DATE(end_day, 'YYYYMMDD'), 'YYYY-MM-DD') AS end_day, 
		    TO_CHAR(TO_DATE(recruit_start_day, 'YYYYMMDD'), 'YYYY-MM-DD') AS recruit_start_day, 
		    TO_CHAR(TO_DATE(recruit_end_day, 'YYYYMMDD'), 'YYYY-MM-DD') AS recruit_end_day, 

		    recruit_people,
		    state_cd as open_state_cd,
		    comn_cd_title as open_state_cd_title,
		    file_id,
		    subject.cat_cd as cat_subject_cd,
		    subject.reg_year,
		    TO_CHAR(TO_DATE(SUBSTR(open_dt, 1, 8), 'YYYYMMDD'), 'YYYY-MM-DD') AS open_dt 
		FROM open
		INNER JOIN subject ON open.subject_id = subject.subject_id
		LEFT JOIN course ON open.course_id = course.course_id
		LEFT JOIN common_code ON open.state_cd = common_code.comn_cd
		WHERE del_yn = 'N' 
		<if test="subjectId != null and !subjectId.equals('') ">
			AND subject.subject_id = #{subjectId}
		</if>
		<if test="subjectTitle != null and !subjectTitle.equals('')">
			AND (subject_title = #{subjectTitle} OR REPLACE (subject_title, ' ', '') LIKE '%'||#{subjectTitle}||'%')
		</if>
		<if test="catSubjectCd != null and !catSubjectCd.equals('')">
			AND subject.cat_cd = #{catSubjectCd} 
		</if>
		<if test="levelCd != null and !levelCd.equals('') ">
			AND level_cd = #{levelCd} 
		</if>
		<if test="openDtYear != 0">
			AND open.open_dt LIKE (#{openDtYear}||'%') 
		</if>
		<choose>
			<when test="cases.equals('case1')">
				AND state_cd in ('OPN02', 'OPN03', 'OPN04')
				AND open.course_id is null
				and to_date(sysdate, 'YYYY-MM-DD') <![CDATA[<=]]> to_date(start_day, 'YYYY-MM-DD') + 7
				<if test="openStateCd != null and !openStateCd.equals('')">
					AND state_cd = #{openStateCd}
				</if>
			</when>
			<when test="cases.equals('case2')">
				AND state_cd = 'OPN05'
			</when>
		</choose>
		ORDER BY open.subject_id, subject_seq
	</select>
	
	<select id="searchOpenCourse" parameterType="OpenVO" resultType="OpenVO">
	/*searchOpenCourse*/
		SELECT *
		    FROM
		    (select DISTINCT
		        open.course_id,
		        open.course_open_year,
		        course_title,
		        TO_CHAR(TO_DATE(min(start_day) over (partition by open.course_id)), 'YYYY-MM-DD') as start_day,
		        TO_CHAR(TO_DATE(max(end_day) over (partition by open.course_id)), 'YYYY-MM-DD') as end_day,
		        sum(cost) over (partition by open.course_id) as cost,
		        TO_CHAR(TO_DATE(recruit_start_day), 'YYYY-MM-DD') as recruit_start_day,
		        TO_CHAR(TO_DATE(recruit_end_day), 'YYYY-MM-DD') as recruit_end_day,
		        course.cat_cd as cat_course_cd,
		        CASE    WHEN    max(open.state_cd) over (partition by course.course_id, open.course_open_year) <![CDATA[<=]]> 'OPN04'
		                THEN    max(open.state_cd) over (partition by course.course_id, open.course_open_year)
		                WHEN    min(open.state_cd) over (partition by course.course_id, open.course_open_year) <![CDATA[>=]]>  'OPN04'
		                THEN    min(open.state_cd) over (partition by course.course_id, open.course_open_year)
		                END open_state_cd
		    from open 
		            left join subject on open.subject_id = subject.subject_id
		            left join course on open.course_id = course.course_id
		            left join common_code on open.state_cd = common_code.comn_cd
		    where open.course_id IS NOT NULL AND del_yn = 'N' AND open.state_cd !='OPN07') /* OPN07 폐강 */
	    <where>
			<if test="courseId != null and !courseId.equals('') ">
				AND open.course_id = #{courseId}
			</if>
			<if test="courseTitle != null and !courseTitle.equals('')">
				AND (course_title = #{courseTitle} OR REPLACE (course_title, ' ', '') LIKE '%'||#{courseTitle}||'%')
			</if>
			<if test="catCourseCd != null and !catCourseCd.equals('')">
				AND course.cat_cd = #{catCourseCd} 
			</if>
			<if test="courseOpenYear != 0">
				AND open.course_open_year = #{courseOpenYear} 
			</if>
			<choose>
				<when test="cases.equals('case1')">
					AND open_state_cd in ('OPN02', 'OPN03')
				</when>
			</choose>
			<if test="openStateCd != null and !openStateCd.equals('')">
			AND open_state_cd = #{openStateCd}
			</if>
		</where>
		order by 1
	</select>
	
	<select id="searchStudentList" parameterType="StudentVO" resultType="StudentVO">
	   /*searchStudentList*/
	      SELECT student_id,
	      		user_id, 
	            name, 
	            gender_cd, 
	            TO_CHAR(TO_DATE(birth, 'YYYYMMDD'), 'YYYY-MM-DD') AS birth, 
	            email, 
	            REGEXP_REPLACE(phone, '(.{3})(.+)(.{4})', '\1-\2-\3') AS phone, 
	            add_do_cd, 
	            add_etc,
	            position_cd 
	      FROM STUDENT 
	      WHERE 1=1 
	      <if test="studentId != null and !studentId.equals('')">
	         AND (student_id = #{studentId} OR REPLACE(UPPER(student_id), ' ', '') LIKE '%' || UPPER(#{studentId}) || '%')
	      </if>
	      <if test="name != null and !name.equals('')">
	         AND name = #{name}
	      </if>
   </select>
   
   <select id="selectSubjectListByCourseId" parameterType="OpenVO" resultType="OpenVO">
   /*selectSubjectListByCourseId*/
   SELECT s.subject_id,
   			subject_title, 
   			TO_CHAR(TO_DATE(start_day, 'YYYYMMDD'), 'YYYY-MM-DD') AS start_day, 
		    TO_CHAR(TO_DATE(end_day, 'YYYYMMDD'), 'YYYY-MM-DD') AS end_day, 
   			SUBSTR(start_time, 1, 2) || ':' || SUBSTR(start_time, 3, 2) AS start_time, 
   			SUBSTR(end_time, 1, 2) || ':' || SUBSTR(end_time, 1, 2) AS end_time,  
   			days, 
   			hours, 
   			level_cd, 
   			cost, 
   			support_yn   
	FROM  SUBJECT s 
	LEFT JOIN OPEN o 
	ON s.subject_id = o.subject_id 
	WHERE del_yn= 'N' AND course_id = #{courseId}
   </select>
	
<!-- 			select DISTINCT
		    open.course_id,
		    course_title,
		    TO_CHAR(TO_DATE(min(start_day) over (partition by open.course_id)), 'YYYY-MM-DD') as start_day,
		    TO_CHAR(TO_DATE(max(end_day) over (partition by open.course_id)), 'YYYY-MM-DD') as end_day,
		    sum(cost) over (partition by open.course_id) as cost,
		    TO_CHAR(TO_DATE(recruit_start_day), 'YYYY-MM-DD') as recruit_start_day,
		    TO_CHAR(TO_DATE(recruit_end_day), 'YYYY-MM-DD') as recruit_end_day,
		    course.cat_cd as cat_course_cd,
            subject.reg_year,
            TO_CHAR(max(open.state_cd) over (partition by open.course_id)) as state_cd
		from open 
		        left join subject on open.subject_id = subject.subject_id
		        left join course on open.course_id = course.course_id
		        left join common_code on open.state_cd = common_code.comn_cd
		where open.course_id IS NOT NULL AND del_yn = 'N'; -->
		
</mapper>