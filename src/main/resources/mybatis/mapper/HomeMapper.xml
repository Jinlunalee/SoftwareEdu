<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mycompany.webapp.dao.IHomeRepository">

	<select id="selectSubjectList" parameterType="String" resultType="OpenVO">	
	/* selectSubjectList */
		select 
			open.subject_id, 
			subject_seq,
			subject_title,
			support_yn, 
			days, 
			hours, 
			level_cd, 
			level_etc, 
			subject.cost,
			open.course_id, 
			course.course_title, 
			start_time,
			end_time,
			start_day,
			end_day, 
			recruit_start_day, 
			recruit_end_day,
			recruit_people,
			state_cd as open_state_cd,
			comn_cd_title as open_state_cd_title,
			file_id,
            subject.cat_cd as cat_subject_cd
		from open 
				left join subject on open.subject_id = subject.subject_id
        		left join course on open.course_id = course.course_id
        		left join common_code on open.state_cd = common_code.comn_cd
        where del_yn = 'N' AND subject.cat_cd=#{catSubjectCd}
        order by start_day, end_day
	</select>
	
	
	
	
	<select id="selectCourseList" parameterType="String" resultType="OpenVO">
	/* selectCourseList */
		select DISTINCT
			open.course_id, 
			course_title,
			min(start_day) over (partition by open.course_id) as start_day,
    		max(end_day) over (partition by open.course_id) as end_day,
			sum(cost) over (partition by open.course_id) as cost,
			recruit_start_day,
			recruit_end_day,
			state_cd as open_state_cd,
			comn_cd_title as open_state_cd_title
		from open 
				left join subject on open.subject_id = subject.subject_id
        		left join course on open.course_id = course.course_id
        		left join common_code on open.state_cd = common_code.comn_cd
        where open.course_id IS NOT NULL and del_yn = 'N' AND course.cat_cd = #{catCourseCd}
	</select>
	
	<select id="getComnCdTitle" parameterType="String" resultType="String">
	/* getComnCdTitle */
		SELECT comn_cd_title
		FROM common_code
		WHERE comn_cd=#{comnCd}
	</select>

	<select id="getComnCdList" parameterType="String" resultType="CommonCodeVO">
	/*getComnCdList*/
		SELECT * 
		FROM common_code
		WHERE comn_cd_type = #{comnCdType} AND use_yn='Y'
	</select>

	<select id="searchSubject" parameterType="SubjectVO" resultType="SubjectVO">
	/*searchSubject*/
		SELECT
		    subject_id,
		    subject_title,
		    support_yn,
		    cat_cd as cat_subject_cd,
		    days,
		    hours,
		    level_cd,
		    level_etc,
		    cost,
		    reg_year
		FROM subject
		<where>
			<if test="subjectId != null and !subjectId.equals('') ">
				AND subject_id = #{subjectId}
			</if>
			<if test="subjectTitle != null and !subjectTitle.equals('')">
				AND (subject_title = #{subjectTitle} OR REPLACE (subject_title, ' ', '') LIKE '%'||#{subjectTitle}||'%')
			</if>
			<if test="catSubjectCd != null and !catSubjectCd.equals('')">
				AND cat_cd = #{catSubjectCd} 
			</if>
			<if test="levelCd != null and !levelCd.equals('') ">
				AND level_cd = #{levelCd} 
			</if>
			<if test="regYear != 0">
				AND reg_year = #{regYear} 
			</if>
		</where>
	</select>
	
	<select id="searchCourse" parameterType="CourseVO" resultType="CourseVO">
	/*searchCourse*/
		SELECT
		    course_id,
		    course_title,
		    cat_cd as cat_course_cd
		FROM course
		<where>
			<if test="courseId != null and !courseId.equals('') ">
				AND course_id = #{courseId}
			</if>
			<if test="courseTitle != null and !courseTitle.equals('')">
				AND (course_title = #{courseTitle} OR REPLACE (course_title, ' ', '') LIKE '%'||#{courseTitle}||'%')
			</if>
			<if test="catCourseCd != null and !catCourseCd.equals('')">
				AND cat_cd = #{catCourseCd} 
			</if>
		</where>
	</select>
	
	<select id="searchOpenSubject" parameterType="OpenVO" resultType="OpenVO">
	/*searchOpenSubject*/
		SELECT
		    open.subject_id, 
		    subject_seq,
		    subject_title,
		    support_yn, 
		    days, 
		    hours, 
		    level_cd, 
		    level_etc, 
		    subject.cost,
		    open.course_id, 
		    course.course_title, 
		    start_time,
		    end_time,
		    start_day,
		    end_day, 
		    recruit_start_day, 
		    recruit_end_day,
		    recruit_people,
		    state_cd as open_state_cd,
		    comn_cd_title as open_state_cd_title,
		    file_id,
		    subject.cat_cd as cat_subject_cd,
		    subject.reg_year,
		    open_dt
		FROM open
		INNER JOIN subject ON open.subject_id = subject.subject_id
		LEFT JOIN course ON open.course_id = course.course_id
		LEFT JOIN common_code ON open.state_cd = common_code.comn_cd
		WHERE del_yn = 'N'
		<if test="subjectId != null and !subjectId.equals('') ">
			AND subject.subject_id = #{subjectId}
		</if>
		<if test="subjectTitle != null and !subjectTitle.equals('')">
			AND (subject_title = #{subjectTitle} OR REPLACE (subject_title, ' ', '') LIKE '%'||#{subjectTitle}||'%')
		</if>
		<if test="catSubjectCd != null and !catSubjectCd.equals('')">
			AND subject.cat_cd = #{catSubjectCd} 
		</if>
		<if test="levelCd != null and !levelCd.equals('') ">
			AND level_cd = #{levelCd} 
		</if>
		<if test="regYear != 0">
			AND subject.reg_year = #{regYear} 
		</if>
		<if test="openStateCd != null and !openStateCd.equals('')">
			AND state_cd = #{openStateCd}
		</if>
		ORDER BY start_day, end_day
	</select>
	
	<select id="searchOpenCourse" parameterType="OpenVO" resultType="OpenVO">
	/*searchOpenCourse*/
		select DISTINCT
		    open.course_id,
		    course_title,
		    TO_CHAR(TO_DATE(min(start_day) over (partition by open.course_id)), 'YYYY-MM-DD') as start_day,
		    TO_CHAR(TO_DATE(max(end_day) over (partition by open.course_id)), 'YYYY-MM-DD') as end_day,
		    sum(cost) over (partition by open.course_id) as cost,
		    TO_CHAR(TO_DATE(recruit_start_day), 'YYYY-MM-DD') as recruit_start_day,
		    TO_CHAR(TO_DATE(recruit_end_day), 'YYYY-MM-DD') as recruit_end_day,
		    course.cat_cd as cat_course_cd,
		    subject.reg_year
		from open 
		        left join subject on open.subject_id = subject.subject_id
		        left join course on open.course_id = course.course_id
		        left join common_code on open.state_cd = common_code.comn_cd
		where open.course_id IS NOT NULL AND del_yn = 'N'
		and open.state_cd in <![CDATA[('OPN02','OPN03','OPN04')]]>
			<if test="courseId != null and !courseId.equals('') ">
				AND open.course_id = #{courseId}
			</if>
			<if test="courseTitle != null and !courseTitle.equals('')">
				AND (course_title = #{courseTitle} OR REPLACE (course_title, ' ', '') LIKE '%'||#{courseTitle}||'%')
			</if>
			<if test="catCourseCd != null and !catCourseCd.equals('')">
				AND course.cat_cd = #{catCourseCd} 
			</if>
			<if test="regYear != 0">
				AND subject.reg_year = #{regYear} 
			</if>
			<if test="openStateCd != null and !openStateCd.equals('')">
			AND open.state_cd = #{openStateCd}
			</if>
	</select>
	
	<select id="searchStudentList" parameterType="StudentVO" resultType="StudentVO">
	   /*searchStudentList*/
	      SELECT student_id, 
	            name, 
	            gender_cd, 
	            TO_CHAR(TO_DATE(birth, 'YYYYMMDD'), 'YYYY/MM/DD') AS "birth", 
	            email, 
	            REGEXP_REPLACE(phone, '(.{3})(.+)(.{4})', '\1-\2-\3') AS "phone", 
	            add_do_cd, 
	            add_etc,
	            position_cd 
	      FROM STUDENT 
	      WHERE 1=1 
	      <if test="studentId != null and !studentId.equals('')">
	         AND (student_id = #{studentId} OR REPLACE(UPPER(student_id), ' ', '') LIKE '%' || UPPER(#{studentId}) || '%')
	      </if>
	      <if test="name != null and !name.equals('')">
	         AND name = #{name}
	      </if>
   </select>
	
<!-- 			select DISTINCT
		    open.course_id,
		    course_title,
		    TO_CHAR(TO_DATE(min(start_day) over (partition by open.course_id)), 'YYYY-MM-DD') as start_day,
		    TO_CHAR(TO_DATE(max(end_day) over (partition by open.course_id)), 'YYYY-MM-DD') as end_day,
		    sum(cost) over (partition by open.course_id) as cost,
		    TO_CHAR(TO_DATE(recruit_start_day), 'YYYY-MM-DD') as recruit_start_day,
		    TO_CHAR(TO_DATE(recruit_end_day), 'YYYY-MM-DD') as recruit_end_day,
		    course.cat_cd as cat_course_cd,
            subject.reg_year,
            TO_CHAR(max(open.state_cd) over (partition by open.course_id)) as state_cd
		from open 
		        left join subject on open.subject_id = subject.subject_id
		        left join course on open.course_id = course.course_id
		        left join common_code on open.state_cd = common_code.comn_cd
		where open.course_id IS NOT NULL AND del_yn = 'N'; -->
</mapper>