<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mycompany.webapp.dao.IPagerRepository">

	<select id="getCountStudentRow" resultType="int">
		/*getCountStudentRow*/
		SELECT count(*) FROM student
	</select>

	<select id="selectStudentListByPage" parameterType="Pager" resultType="StudentVO">
		/*selectStudentListByPage*/
		<include refid="paging-header" /> 
		    SELECT
		    	name,
				student_id, 
				email, 
				to_char(to_date(birth), 'YYYY-MM-DD') as birth, 	
            	common_code.comn_cd_title as position_title
		    FROM student
		    left join common_code on student.position_cd = common_code.comn_cd
		    ORDER BY student_id
		<include refid="paging-footer" /> 
	</select>
	
	<select id="getCountOpenCourseRow" parameterType="String" resultType="int">
		/*getCountOpenCourseRow*/
		SELECT count(distinct open.course_id)
		FROM open
		LEFT JOIN course ON open.course_id = course.course_id
		WHERE open.course_id is not null AND del_yn = 'N'
		<if test="catCourseCd != 'all'">
			AND course.cat_cd = #{catCourseCd}
		</if>
	</select>

	<select id="selectOpenCourseListByPage" parameterType="map" resultType="OpenVO">
		/*selectOpenCourseListByPage*/
		<include refid="paging-header" /> 
		        select DISTINCT
					open.course_id,
					course_title,
					TO_CHAR(TO_DATE(min(start_day) over (partition by open.course_id)), 'YYYY-MM-DD') as start_day,
					TO_CHAR(TO_DATE(max(end_day) over (partition by open.course_id)), 'YYYY-MM-DD') as end_day,
					sum(cost) over (partition by open.course_id) as cost,
					TO_CHAR(TO_DATE(recruit_start_day), 'YYYY-MM-DD') as recruit_start_day,
					TO_CHAR(TO_DATE(recruit_end_day), 'YYYY-MM-DD') as recruit_end_day,
					course.cat_cd as cat_course_cd,
					course_open_year
				from open 
						left join subject on open.subject_id = subject.subject_id
		        		left join course on open.course_id = course.course_id
		        		left join common_code on open.state_cd = common_code.comn_cd
		        where open.course_id IS NOT NULL AND del_yn = 'N'
				<if test="catCourseCd != 'all'">
					AND course.cat_cd = #{catCourseCd}
				</if>
		<include refid="paging-footer" /> 
	</select>	
	
	<select id="getCountOpenSubjectRow" parameterType="String" resultType="int">
		/*getCountOpenSubjectRow*/
		SELECT count(*)
		FROM open
		LEFT JOIN subject ON open.subject_id = subject.subject_id
		WHERE del_yn = 'N' 
		<if test="catSubjectCd != 'all'">
			AND subject.cat_cd=#{catSubjectCd}
		</if>
	</select>

	<select id="selectOpenSubjectListByPage" parameterType="map" resultType="OpenVO">
		/*selectOpenSubjectListByPage1*/
		<include refid="paging-header" /> 
		        select 
					open.subject_id,
					subject_seq,
					subject_title,
					support_yn,
					days,
					hours,
					level_cd,
					level_etc,
					subject.cost,
					open.course_id,
					course.course_title,
					TO_CHAR(TO_TIMESTAMP(start_time, 'HH24:MI'),'HH24:MI') as start_time,
					TO_CHAR(TO_TIMESTAMP(end_time, 'HH24:MI'),'HH24:MI') as end_time,
					TO_CHAR(TO_DATE(start_day), 'YYYY-MM-DD') as start_day,
					TO_CHAR(TO_DATE(end_day), 'YYYY-MM-DD') as end_day,
					TO_CHAR(TO_DATE(recruit_start_day), 'YYYY-MM-DD') as recruit_start_day,
					TO_CHAR(TO_DATE(recruit_end_day), 'YYYY-MM-DD') as recruit_end_day,
					recruit_people,
					state_cd as open_state_cd,
					comn_cd_title as open_state_cd_title,
					file_id,
					subject.cat_cd as cat_subject_cd,
					TO_CHAR(TO_DATE(open.open_dt, 'YYYYMMDD/HH24MISS'),'YYYY-MM-DD HH24:MI') as open_dt
				from open 
						left join subject on open.subject_id = subject.subject_id
		        		left join course on open.course_id = course.course_id
		        		left join common_code on open.state_cd = common_code.comn_cd
		        WHERE del_yn = 'N' 
				<if test="catSubjectCd != 'all'">
					AND subject.cat_cd=#{catSubjectCd}
				</if>
				order by open.open_dt desc
		<include refid="paging-footer" /> 
	</select>
	

	<select id="getCountEnrollRow" resultType="int">
		/*getCountEnrollRow*/
		SELECT count(*)
		FROM enroll
		WHERE del_yn = 'N' 
	</select>

	<select id="selectEnrollListByPage" parameterType="Pager" resultType="EnrollVO">
		/*selectEnrollListByPage*/
		<include refid="paging-header" /> 
		        SELECT  enroll_id, 
		                e.subject_id,
		                e.subject_seq,
		                e.student_id, 
		                name,
		                s.subject_title,
		                e.state_cd,
		                complete_hours, 
		                TO_CHAR(TO_DATE(SUBSTR(enroll_dt, 1, 8), 'YYYYMMDD'), 'YYYY-MM-DD') AS "enrollDt", 
		                e.reg_id,
		                e.reg_dt,
		                e.modi_id,
		                e.modi_dt,
		                e.del_yn, 
		                cancel_rs_cd, 
		                cancel_rs_etc, 
		                start_time,
		                end_time,
		                start_day,
		                end_day,
		                o.state_cd as open_state_cd,
                        o.course_id,
        				course_title,
        				ROUND(complete_hours/s.hours * 100) AS "ratio"
		        FROM ENROLL e 
		        INNER JOIN STUDENT t 
		        ON e.student_id = t.student_id 
		        INNER JOIN OPEN o 
		        ON e.subject_id = o.subject_id AND e.subject_seq = o.subject_seq 
		        INNER JOIN SUBJECT s 
		        ON e.subject_id = s.subject_id 
		        LEFT OUTER JOIN course c
				ON o.course_id = c.course_id
		        WHERE NOT (e.del_yn ='Y') 
		        ORDER BY e.reg_dt DESC 
		<include refid="paging-footer" />  
	</select>	
	
	<select id="getCountSearchRow" parameterType="EnrollVO" resultType="int">
		/*getCountSearchRow*/
		SELECT count(*) 
		FROM ENROLL e 
		INNER JOIN STUDENT t 
		ON e.student_id = t.student_id 
        INNER JOIN OPEN o 
        ON e.subject_id = o.subject_id AND e.subject_seq = o.subject_seq 
        INNER JOIN SUBJECT s 
        ON e.subject_id = s.subject_id 
        LEFT OUTER JOIN COURSE c 
        ON c.course_id = o.course_id 
		WHERE NOT (e.del_yn ='Y') 
		<include refid="enroll-search" />
	</select>
	
	<select id="selectSearchListByPage" parameterType="map" resultType="EnrollVO">
		/*selectSearchListByPage*/
		<include refid="paging-header" /> 
			SELECT  enroll_id, 
				e.subject_id, 
				e.subject_seq, 
				s.subject_title, 
				c.course_id, 
                c.course_title, 
				e.student_id, 
				name,  
				e.state_cd, 
				complete_hours, 
				TO_CHAR(TO_DATE(SUBSTR(enroll_dt, 1, 8), 'YYYYMMDD'), 'YYYY-MM-DD') AS "enrollDt", 
				e.reg_id, 
				e.reg_dt, 
				e.modi_id, 
				e.modi_dt, 
				e.del_yn, 
				cancel_rs_cd, 
				cancel_rs_etc, 
        		start_time, 
        		end_time, 
        		start_day, 
        		end_day,
        		o.state_cd as open_state_cd,
        		ROUND(complete_hours/s.hours * 100) AS "ratio" 
		FROM ENROLL e 
		INNER JOIN STUDENT t 
		ON e.student_id = t.student_id 
        INNER JOIN OPEN o 
        ON e.subject_id = o.subject_id AND e.subject_seq = o.subject_seq 
        INNER JOIN SUBJECT s 
        ON e.subject_id = s.subject_id 
        LEFT OUTER JOIN COURSE c 
        ON c.course_id = o.course_id 
		WHERE NOT (e.del_yn ='Y') 
		<include refid="enroll-search" />
		ORDER BY e.reg_dt DESC 
		<include refid="paging-footer" /> 
	</select>
	
	<sql id="paging-header">
    <!-- 페이징 쿼리 윗부분-->
    /*paging-header*/
		SELECT *
        FROM (
            SELECT rownum AS rnum, A.*
            FROM (    
	</sql>
	
	<sql id="paging-footer">
    <!-- 페이징 쿼리 아랫부분 -->
    /*paging-footer*/
            ) A WHERE rownum <![CDATA[ < ]]>= #{endRowNo} 
        ) WHERE rnum <![CDATA[ > ]]>= #{startRowNo}
    </sql>
    
    <sql id="enroll-search">
    <!-- 수강 검색 쿼리 -->
    /*enroll-search*/
		<if test="applyStartDay != '' and applyEndDay != ''">
			AND SUBSTR(e.enroll_dt, 1, 8) BETWEEN TO_DATE(#{applyStartDay}) AND TO_DATE(#{applyEndDay})  
		</if>
		<if test="applyStartDay != '' and applyEndDay == ''">
			AND SUBSTR(e.enroll_dt, 1, 8) BETWEEN TO_DATE(#{applyStartDay}) AND TO_DATE(TO_CHAR(SYSDATE, 'YYYYMMDD')) 
		</if>
		<if test='student != null and student.equals("sdName")'>
			AND (name = #{keyword1} OR REPLACE(name, ' ', '') LIKE '%' || #{keyword1} || '%') 
		</if>
		<if test='student != null and student.equals("sdId")'>
			AND (e.student_id = #{keyword1} OR REPLACE(UPPER(e.student_id), ' ', '') LIKE '%' || UPPER(#{keyword1}) || '%') 
		</if>
		<if test='course != null and course.equals("sj")'>
			AND (s.subject_title = #{keyword2} OR REPLACE(UPPER(s.subject_title), ' ', '') LIKE '%' || UPPER(#{keyword2}) || '%')   
		</if>
		<if test='course != null and course.equals("cs")'>
			AND c.course_id is not null AND (c.course_title = #{keyword2} OR REPLACE(UPPER(c.course_title), ' ', '') LIKE '%' || UPPER(#{keyword2}) || '%')   
		</if>
		<if test='state != null and state.equals("apply")'>
			AND e.state_cd = 'ERL01' 
		</if>
		<if test='state != null and state.equals("applyCancel")'>
			AND e.state_cd = 'ERL02' 
		</if>
		<if test='state != null and state.equals("expect")'>
			AND e.state_cd = 'ERL03' 
		</if>
		<if test='state != null and state.equals("progress")'>
			AND e.state_cd = 'ERL04' 
		</if>
		<if test='state != null and state.equals("cancel")'>
			AND e.state_cd = 'ERL05' 
		</if>
		<if test='state != null and state.equals("complete")'>
			AND e.state_cd = 'ERL06' 
		</if>
    </sql>
	
</mapper>