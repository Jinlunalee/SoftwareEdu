<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mycompany.webapp.dao.IPagerRepository">

	<select id="getCountStudentRow" resultType="int">
		/*getCountStudentRow*/
		SELECT count(*) FROM student
	</select>

	<select id="selectStudentListByPage" parameterType="Pager" resultType="StudentVO">
		/*selectStudentListByPage*/
		<include refid="paging-header" /> 
		    SELECT
		    	name,
		    	student_id,
				user_id, 
				email, 
				to_char(to_date(birth), 'YYYY-MM-DD') as birth, 	
            	common_code.comn_cd_title as position_title
		    FROM student
		    left join common_code on student.position_cd = common_code.comn_cd
		    ORDER BY student_id
		<include refid="paging-footer" /> 
	</select>
	
	<select id="getCountEnrollRow" resultType="int">
		/*getCountEnrollRow*/
		SELECT count(*) 
		FROM enroll 
		WHERE del_yn = 'N'
	</select>

	<select id="selectEnrollListByPage" parameterType="Pager" resultType="EnrollVO">
		/*selectEnrollListByPage*/
		<include refid="paging-header" /> 
		        SELECT  enroll_id, 
		                e.subject_id, 
		                e.subject_seq, 
		                e.student_id, 
		                name, 
		                sub.subject_title, 
		                e.state_cd, 
		                complete_hours, 
		                TO_CHAR(TO_DATE(SUBSTR(enroll_dt, 1, 8), 'YYYYMMDD'), 'YYYY-MM-DD') AS enroll_dt, 
		                e.reg_id, 
		                e.reg_dt, 
		                e.modi_id, 
		                e.modi_dt, 
		                e.del_yn, 
		                cancel_rs_cd, 
		                cancel_rs_etc, 
		                start_time, 
		                end_time, 
		                start_day, 
		                end_day, 
		                o.state_cd as open_state_cd, 
                        o.course_id, 
        				course_title, 
        				ROUND(complete_hours/sub.hours * 100) AS ratio 
		        FROM ENROLL e 
		        INNER JOIN STUDENT stu 
		        ON e.student_id = stu.student_id 
		        INNER JOIN OPEN o 
		        ON e.subject_id = o.subject_id AND e.subject_seq = o.subject_seq 
		        INNER JOIN SUBJECT sub 
		        ON e.subject_id = sub.subject_id 
		        LEFT OUTER JOIN course c 
				ON o.course_id = c.course_id 
		        WHERE e.del_yn ='N' 
		        ORDER BY e.reg_dt DESC 
		<include refid="paging-footer" />
	</select>	
	
	<select id="getCountSearchRow" parameterType="EnrollVO" resultType="int">
		/*getCountSearchRow*/
		SELECT count(*) 
		FROM ENROLL e 
		INNER JOIN STUDENT stu 
		ON e.student_id = stu.student_id 
        INNER JOIN OPEN o 
        ON e.subject_id = o.subject_id AND e.subject_seq = o.subject_seq 
        INNER JOIN SUBJECT sub 
        ON e.subject_id = sub.subject_id 
        LEFT OUTER JOIN COURSE c 
        ON c.course_id = o.course_id 
		WHERE e.del_yn ='N' 
		<include refid="enroll-search" />
	</select>
	
	<select id="selectSearchListByPage" parameterType="map" resultType="EnrollVO">
		/*selectSearchListByPage*/
		<include refid="paging-header" /> 
		SELECT	enroll_id, 
				e.subject_id, 
				e.subject_seq, 
				sub.subject_title, 
				c.course_id, 
                c.course_title, 
				e.student_id, 
				stu.user_id, 
				name, 
				e.state_cd AS state_cd, 
				complete_hours, 
				TO_CHAR(TO_DATE(SUBSTR(enroll_dt, 1, 8), 'YYYYMMDD'), 'YYYY-MM-DD') AS enroll_dt, 
				e.reg_id, 
				e.reg_dt, 
				e.modi_id, 
				e.modi_dt, 
				e.del_yn, 
				cancel_rs_cd, 
				cancel_rs_etc, 
        		start_time, 
        		end_time, 
        		start_day, 
        		end_day, 
        		o.state_cd as open_state_cd, 
        		ROUND(complete_hours/sub.hours * 100) AS ratio 
		FROM ENROLL e 
		INNER JOIN STUDENT stu 
		ON e.student_id = stu.student_id 
        INNER JOIN OPEN o 
        ON e.subject_id = o.subject_id AND e.subject_seq = o.subject_seq 
        INNER JOIN SUBJECT sub 
        ON e.subject_id = sub.subject_id 
        LEFT OUTER JOIN COURSE c 
        ON c.course_id = o.course_id 
		WHERE e.del_yn ='N' 
		<include refid="enroll-search" />
		ORDER BY e.reg_dt DESC 
		<include refid="paging-footer" />
	</select>
	
	<select id="selectSearchListByExcel" parameterType="map" resultType="EnrollVO">
		/*selectSearchListByExcel*/
		SELECT	enroll_id, 
				e.subject_id, 
				e.subject_seq, 
				sub.subject_title, 
				c.course_id, 
                c.course_title, 
				e.student_id, 
				stu.user_id, 
				name, 
				e.state_cd AS state_cd, 
				complete_hours, 
				TO_CHAR(TO_DATE(SUBSTR(enroll_dt, 1, 8), 'YYYYMMDD'), 'YYYY-MM-DD') AS enroll_dt, 
				e.reg_id, 
				e.reg_dt, 
				e.modi_id, 
				e.modi_dt, 
				e.del_yn, 
				cancel_rs_cd, 
				cancel_rs_etc, 
        		start_time, 
        		end_time, 
        		start_day, 
        		end_day, 
        		o.state_cd AS open_state_cd, 
        		ROUND(complete_hours/sub.hours * 100) AS ratio  
		FROM ENROLL e 
		INNER JOIN STUDENT stu 
		ON e.student_id = stu.student_id 
        INNER JOIN OPEN o 
        ON e.subject_id = o.subject_id AND e.subject_seq = o.subject_seq 
        INNER JOIN SUBJECT sub 
        ON e.subject_id = sub.subject_id 
        LEFT OUTER JOIN COURSE c 
        ON c.course_id = o.course_id 
		WHERE e.del_yn ='N'  
		<include refid="enroll-search" />
		ORDER BY e.reg_dt DESC
	</select>
	
	<select id="getCountSearchOpenCourseRow" parameterType="map" resultType="int">
		/*getCountSearchOpenCourseRow*/
		select count(*)
		from (
		    select DISTINCT
							o.course_id,
							course_title,
							course_open_year
						from open o 
				        		left join course c on o.course_id = c.course_id
				        where o.course_id IS NOT NULL AND del_yn = 'N'
				        <include refid="course-search" />
		)
	</select>

	<select id="selectSearchOpenCourseListByPage" parameterType="map" resultType="OpenVO">
		/*selectSearchOpenCourseListByPage*/
		<include refid="paging-header" /> 
		        select DISTINCT
					o.course_id,
					course_title,
					TO_CHAR(TO_DATE(min(start_day) over (partition by o.course_id)), 'YYYY-MM-DD') as start_day,
					TO_CHAR(TO_DATE(max(end_day) over (partition by o.course_id)), 'YYYY-MM-DD') as end_day,
					sum(cost) over (partition by o.course_id) as cost,
					TO_CHAR(TO_DATE(recruit_start_day), 'YYYY-MM-DD') as recruit_start_day,
					TO_CHAR(TO_DATE(recruit_end_day), 'YYYY-MM-DD') as recruit_end_day,
					c.cat_cd as catCourseCd,
					course_open_year
				from open o 
						left join subject s on o.subject_id = s.subject_id
		        		left join course c on o.course_id = c.course_id
		        		left join common_code  cm on o.state_cd = cm.comn_cd
		        where o.course_id IS NOT NULL AND del_yn = 'N'
				<include refid="course-search" />
				order by course_open_year desc
		<include refid="paging-footer" /> 
	</select>	
	
	<select id="getCountSearchOpenSubjectRow" parameterType="map" resultType="int">
	/*getCountOpenSubjectRow*/
		SELECT count(*)
		FROM open o
		LEFT JOIN subject s ON o.subject_id = s.subject_id
		WHERE del_yn = 'N'
		<include refid="subject-search" />
	</select>
	
	<select id="selectSearchOpenSubjectListByPage" parameterType="map" resultType="OpenVO">
		/*selectOpenSubjectListByPage1*/
		<include refid="paging-header" /> 
	        select 
				o.subject_id,
				subject_seq,
				subject_title,
				support_yn,
				hours,
				level_cd,
				level_etc,
				s.cost,
				o.course_id,
				c.course_title,
				TO_CHAR(TO_TIMESTAMP(start_time, 'HH24:MI'),'HH24:MI') as start_time,
				TO_CHAR(TO_TIMESTAMP(end_time, 'HH24:MI'),'HH24:MI') as end_time,
				TO_CHAR(TO_DATE(start_day), 'YYYY-MM-DD') as start_day,
				TO_CHAR(TO_DATE(end_day), 'YYYY-MM-DD') as end_day,
				TO_CHAR(TO_DATE(recruit_start_day), 'YYYY-MM-DD') as recruit_start_day,
				TO_CHAR(TO_DATE(recruit_end_day), 'YYYY-MM-DD') as recruit_end_day,
				recruit_people,
				state_cd as open_state_cd,
				comn_cd_title as open_state_cd_title,
				file_id,
				s.cat_cd as catSubjectCd,
				TO_CHAR(TO_DATE(o.open_dt, 'YYYYMMDD/HH24MISS'),'YYYY-MM-DD HH24:MI') as open_dt
			from open o
					left join subject s on o.subject_id = s.subject_id
	        		left join course  c on o.course_id = c.course_id
	        		left join common_code cm on o.state_cd = cm.comn_cd
	        WHERE del_yn = 'N' 
			<include refid="subject-search" />
			order by o.open_dt desc
		<include refid="paging-footer" /> 
	</select>
	
	<select id="getCountSearchStudentRow" parameterType="map" resultType="int">
		/*getCountSearchStudentRow*/
		SELECT count(*) FROM student where 1=1 
		<include refid="student-search" />
	</select>

	<select id="selectSearchStudentListByPage" parameterType="map" resultType="StudentVO">
		/*selectSearchStudentListByPage*/
		<include refid="paging-header" /> 
		    SELECT
		    	name,
		    	user_id,
				student_id, 
				email, 
				to_char(to_date(birth), 'YYYY-MM-DD') as birth, 	
            	cm.comn_cd_title as position_title
		    FROM student s
		    left join common_code cm on s.position_cd = cm.comn_cd	    
		    where 1=1 
		    <include refid="student-search" />
		    ORDER BY student_id
		<include refid="paging-footer" /> 
	</select>
	
	<sql id="paging-header">
    <!-- 페이징 쿼리 윗부분-->
    /*paging-header*/
		SELECT *
        FROM (
            SELECT rownum AS rnum, A.*
            FROM (    
	</sql>
	
	<sql id="paging-footer">
    <!-- 페이징 쿼리 아랫부분 -->
    /*paging-footer*/
            ) A WHERE rownum <![CDATA[ < ]]>= #{endRowNo} 
        ) WHERE rnum <![CDATA[ > ]]>= #{startRowNo}
    </sql>
    
    <sql id="enroll-search">
    <!-- 수강 검색 쿼리 -->
    /*enroll-search*/
    	<if test="applyStartDay == '' and applyEndDay == ''">
    		AND SUBSTR(e.enroll_dt, 1, 8) BETWEEN TO_DATE(TO_CHAR(ADD_MONTHS(SYSDATE, -12), 'YYYYMMDD')) AND TO_DATE(TO_CHAR(SYSDATE, 'YYYYMMDD')) 
    	</if>
		<if test="applyStartDay != '' and applyEndDay != ''">
			AND SUBSTR(e.enroll_dt, 1, 8) BETWEEN TO_DATE(#{applyStartDay}) AND TO_DATE(#{applyEndDay})  
		</if>
		<if test="applyStartDay != '' and applyEndDay == ''">
			AND SUBSTR(e.enroll_dt, 1, 8) BETWEEN TO_DATE(#{applyStartDay}) AND TO_DATE(TO_CHAR(SYSDATE, 'YYYYMMDD')) 
		</if>
		<if test='student != null and student.equals("sdName")'>
			AND (name = #{keyword1} OR REPLACE(name, ' ', '') LIKE '%' || #{keyword1} || '%') 
		</if>
		<if test='student != null and student.equals("sdId")'>
			AND (stu.user_id = #{keyword1} OR REPLACE(UPPER(stu.user_id), ' ', '') LIKE '%' || UPPER(#{keyword1}) || '%') 
		</if>
		<if test='course != null and course.equals("sj")'>
			AND (sub.subject_title = #{keyword2} OR REPLACE(UPPER(sub.subject_title), ' ', '') LIKE '%' || UPPER(#{keyword2}) || '%')   
		</if>
		<if test='course != null and course.equals("cs")'>
			AND c.course_id is not null AND (c.course_title = #{keyword2} OR REPLACE(UPPER(c.course_title), ' ', '') LIKE '%' || UPPER(#{keyword2}) || '%')   
		</if>
		<if test='state != null and state.equals("apply")'>
			AND e.state_cd = 'ERL01' 
		</if>
		<if test='state != null and state.equals("applyCancel")'>
			AND e.state_cd = 'ERL02' 
		</if>
		<if test='state != null and state.equals("expect")'>
			AND e.state_cd = 'ERL03' 
		</if>
		<if test='state != null and state.equals("progress")'>
			AND e.state_cd = 'ERL04' 
		</if>
		<if test='state != null and state.equals("cancel")'>
			AND e.state_cd = 'ERL05' 
		</if>
		<if test='state != null and state.equals("complete")'>
			AND e.state_cd = 'ERL06' 
		</if>
    </sql>
    
    <sql id="course-search">
    /*course-search*/
    	<if test="catCourseCd != 'all'">
			AND c.cat_cd = #{catCourseCd}
		</if>
    	<if test='course != null and course.equals("crseId")'>
    		AND (o.course_id = #{keyword} OR REPLACE(UPPER(o.course_id), ' ', '') LIKE '%' || UPPER(#{keyword}) || '%')
		</if>
		<if test='course != null and course.equals("crseTitle")'>
			AND (course_title = #{keyword} OR REPLACE(UPPER(course_title), ' ', '') LIKE '%' || UPPER(#{keyword}) || '%')
		</if>
    </sql>
    
    <sql id="subject-search">
    /*subject-search*/
    	<if test="catSubjectCd != 'all'">
			AND s.cat_cd=#{catSubjectCd}
		</if>
    	<if test='subject != null and subject.equals("subjId")'>
    		AND (o.subject_id = #{keyword} OR REPLACE(UPPER(o.subject_id), ' ', '') LIKE '%' || UPPER(#{keyword}) || '%')
		</if>
		<if test='subject != null and subject.equals("subjTitle")'>
			AND (subject_title = #{keyword} OR REPLACE(UPPER(subject_title), ' ', '') LIKE '%' || UPPER(#{keyword}) || '%')
		</if>
    </sql>
    
    <sql id="student-search">
    /*student-search*/
    	<if test='student != null and student.equals("stdtId")'>
    		AND (user_id = #{keyword} OR REPLACE(UPPER(user_id), ' ', '') LIKE '%' || UPPER(#{keyword}) || '%')
		</if>
		<if test='student != null and student.equals("stdtName")'>
			AND (name = #{keyword} OR REPLACE(UPPER(name), ' ', '') LIKE '%' || UPPER(#{keyword}) || '%')
		</if>
    </sql>
	
</mapper>